/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.mycompany.petshop;

import com.mycompany.petshop.model.Agendamento;
import com.mycompany.petshop.model.Persistencia;
import com.mycompany.petshop.model.Pet;
import com.mycompany.petshop.model.Servico;
import com.mycompany.petshop.model.Usuario;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;

/**
 *
 * @author Rocha
 */
public class CadastrarAgendamento extends javax.swing.JInternalFrame {

    private Usuario usuarioLogado;
    private ArrayList<Pet> petsDoUsuario;

    /**
     * Creates new form CadastrarAgendamento
     */
    public CadastrarAgendamento(Usuario usuarioLogado) {
        this.usuarioLogado = usuarioLogado;
        initComponents();
        carregarPetsDoUsuario(this.usuarioLogado);
        carregarServicos();
    }

    private void carregarPetsDoUsuario(Usuario usuarioLogado) {
        txtPet.removeAllItems();
        petsDoUsuario = new ArrayList<>();  // limpa lista

        for (Pet pet : Persistencia.getPets()) {
            if (pet.getUsuarioId() == usuarioLogado.getId()) {
                txtPet.addItem(pet.getNome());
                petsDoUsuario.add(pet);
            }
        }
    }

    private void carregarServicos() {
        DefaultListModel<String> modelo = new DefaultListModel<>();

        for (Servico servico : Persistencia.getServicos()) {
            modelo.addElement(servico.getNome() + " | " + servico.getTempoEstimado() + " | R$" + servico.getPreco());
        }

        txtServicos.setModel(modelo);
    }

    private boolean isMesmaData(java.util.Date d1, java.util.Date d2) {
        java.util.Calendar c1 = java.util.Calendar.getInstance();
        java.util.Calendar c2 = java.util.Calendar.getInstance();
        c1.setTime(d1);
        c2.setTime(d2);
        return c1.get(java.util.Calendar.YEAR) == c2.get(java.util.Calendar.YEAR)
                && c1.get(java.util.Calendar.DAY_OF_YEAR) == c2.get(java.util.Calendar.DAY_OF_YEAR);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTituloPagina = new javax.swing.JLabel();
        lblPet = new javax.swing.JLabel();
        txtPet = new javax.swing.JComboBox<>();
        lblServicos = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtServicos = new javax.swing.JList<>();
        lblData = new javax.swing.JLabel();
        txtData = new com.toedter.calendar.JDateChooser();
        lblHora = new javax.swing.JLabel();
        btEnviar = new javax.swing.JButton();
        btnFechar = new javax.swing.JButton();
        txtHora = new javax.swing.JSpinner();

        jPanel1.setBackground(new java.awt.Color(255, 204, 153));

        lblTituloPagina.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTituloPagina.setText("Cadastrar Agendamento");

        lblPet.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblPet.setText("Pet:");

        txtPet.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        txtPet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPetActionPerformed(evt);
            }
        });

        lblServicos.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblServicos.setText("Serviços:");

        jScrollPane1.setViewportView(txtServicos);

        lblData.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblData.setText("Data:");

        lblHora.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblHora.setText("Hora:");

        btEnviar.setText("Agendar");
        btEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEnviarActionPerformed(evt);
            }
        });

        btnFechar.setText("Fechar");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        txtHora.setModel(new javax.swing.SpinnerDateModel());
        JSpinner.DateEditor timeEditor = new JSpinner.DateEditor(txtHora, "HH:mm");
        txtHora.setEditor(timeEditor);
        txtHora.setValue(new java.util.Date());
        txtData.addPropertyChangeListener("date", evt -> {
            java.util.Date dataSelecionada = txtData.getDate();
            java.util.Date hoje = new java.util.Date();

            if (dataSelecionada != null) {
                // Se a data for hoje
                if (isMesmaData(dataSelecionada, hoje)) {
                    // Ajusta hora mínima para a hora atual
                    java.util.Calendar cal = java.util.Calendar.getInstance();
                    txtHora.setValue(cal.getTime()); // define hora atual como valor padrão
                } else {
                    // Define um horário padrão (por exemplo, 09:00) para dias futuros
                    java.util.Calendar cal = java.util.Calendar.getInstance();
                    cal.set(java.util.Calendar.HOUR_OF_DAY, 9);
                    cal.set(java.util.Calendar.MINUTE, 0);
                    txtHora.setValue(cal.getTime());
                }
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(lblTituloPagina)
                .addContainerGap(122, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnFechar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblServicos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblHora, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                    .addComponent(txtPet, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(txtHora))
                .addGap(24, 24, 24))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblTituloPagina)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPet)
                    .addComponent(txtPet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblServicos)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblData)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHora)
                    .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFechar)
                    .addComponent(btEnviar))
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnFecharActionPerformed

    private void btEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEnviarActionPerformed
        java.util.Date dataSelecionada = txtData.getDate();
        java.util.Date horaSelecionada = (java.util.Date) txtHora.getValue();

        java.util.Calendar calData = java.util.Calendar.getInstance();
        calData.setTime(dataSelecionada);

        java.util.Calendar calHora = java.util.Calendar.getInstance();
        calHora.setTime(horaSelecionada);

        calData.set(java.util.Calendar.HOUR_OF_DAY, calHora.get(java.util.Calendar.HOUR_OF_DAY));
        calData.set(java.util.Calendar.MINUTE, calHora.get(java.util.Calendar.MINUTE));

        if (calData.getTime().before(new java.util.Date())) {
            JOptionPane.showMessageDialog(this, "Não é possível agendar para datas ou horários passados!");
            return;
        }

        try {
            int indexPetSelecionado = txtPet.getSelectedIndex();
            if (indexPetSelecionado < 0 || indexPetSelecionado >= petsDoUsuario.size()) {
                throw new Exception("Selecione um pet válido.");
            }

            Pet petSelecionado = petsDoUsuario.get(indexPetSelecionado);
            int petId = petSelecionado.getId();

            int[] indices = txtServicos.getSelectedIndices();
            if (indices.length == 0) {
                throw new Exception("Selecione pelo menos um serviço.");
            }

            ArrayList<Servico> servicosSelecionados = new ArrayList<>();
            for (int idx : indices) {
                servicosSelecionados.add(Persistencia.getServicos().get(idx));
            }

            Date data = txtData.getDate();
            Date hora = (Date) txtHora.getValue();

            if (data == null) {
                throw new Exception("Selecione a data.");
            }

            // Combina data e hora
            Date dataHoraAgendamento = new Date(
                    data.getYear(), data.getMonth(), data.getDate(),
                    hora.getHours(), hora.getMinutes()
            );

            Agendamento novoAgendamento = new Agendamento(
                    usuarioLogado.getId(),
                    petId,
                    servicosSelecionados,
                    dataHoraAgendamento
            );

            boolean cadastrado = Persistencia.cadastrarAgendamento(novoAgendamento);
            if (cadastrado) {
                javax.swing.JOptionPane.showMessageDialog(this, "Agendamento cadastrado com sucesso!");
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Conflito de horário! Escolha outro horário.");
            }
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_btEnviarActionPerformed

    private void txtPetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPetActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btEnviar;
    private javax.swing.JButton btnFechar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblHora;
    private javax.swing.JLabel lblPet;
    private javax.swing.JLabel lblServicos;
    private javax.swing.JLabel lblTituloPagina;
    private com.toedter.calendar.JDateChooser txtData;
    private javax.swing.JSpinner txtHora;
    private javax.swing.JComboBox<String> txtPet;
    private javax.swing.JList<String> txtServicos;
    // End of variables declaration//GEN-END:variables
}
